cmake_minimum_required(VERSION 3.23)
project(jvmti_example)

set(CMAKE_CXX_STANDARD 11)
#set(CMAKE_VERBOSE_MAKEFILE ON)
#set(CMAKE_MESSAGE_LOG_LEVEL DEBUG)
#set(CMAKE_FETCHCONTENT_QUIET OFF)
set(JAVA_HOME "~/Library/Java/JavaVirtualMachines/ms-21.0.7/Contents/Home")
# 设置Java和JVMTI路径
set(JAVA_HOME "~/Library/Java/JavaVirtualMachines/ms-21.0.7/Contents/Home" CACHE PATH "Java SDK路径")
if (NOT JAVA_HOME)
    message(FATAL_ERROR "未设置JAVA_HOME环境变量，请通过-DJAVA_HOME=/path/to/jdk指定")
endif ()

if (UNIX AND NOT APPLE)
    set(PLATFORM "linux")
elseif (APPLE)
    set(PLATFORM "darwin")
else ()
    set(PLATFORM "windows")
endif ()
message(STATUS "${PLATFORM}")

# 添加JVMTI头文件
include_directories(
        ${JAVA_HOME}/include
        ${JAVA_HOME}/include/${PLATFORM}  # 根据平台选择：linux/win32/darwin
)

# 添加源文件
add_library(jvmti_example SHARED
        src/agent.cpp
)

# 链接必要的库（Linux/macOS需要）
if(UNIX AND NOT APPLE)
    target_link_libraries(jvmti_example
            ${JAVA_HOME}/lib/server/libjvm.so
    )
elseif(APPLE)
    target_link_libraries(jvmti_example
            ${JAVA_HOME}/lib/server/libjvm.dylib
    )
endif()

# 设置输出目录和库名称
set_target_properties(jvmti_example PROPERTIES
        LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib
        PREFIX ""  # 移除lib前缀
)

## 启用FetchContent模块
#include(FetchContent)
#
## 配置OpenJDK源码仓库和版本
#set(OPENJDK_REPO "git@github.com:openjdk/jdk.git" CACHE STRING "OpenJDK源码仓库")
#set(OPENJDK_TAG "jdk-21+35" CACHE STRING "OpenJDK版本标签")
#
#
#message("${JAVA_HOME}")
## 获取JVMTI头文件
#FetchContent_Declare(
#        openjdk
#        GIT_REPOSITORY ${OPENJDK_REPO}
#        GIT_TAG ${OPENJDK_TAG}
#        GIT_PROGRESS TRUE  # 显示 Git 克隆进度
##        SOURCE_DIR ${CMAKE_BINARY_DIR}/openjdk-src
#)
#
## 只下载必要的头文件目录，避免完整克隆仓库
#FetchContent_GetProperties(openjdk)
#if (NOT openjdk_POPULATED)
#    message(STATUS "正在下载JVMTI头文件...")
#    FetchContent_MakeAvailable(openjdk)
#    #    FetchContent_Populate(openjdk)
#    message(STATUS "JVMTI头文件下载完成.")
#    # 创建必要的目录结构
#    file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/jvmti_headers)
#    file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/jvmti_headers/jni)
#    file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/jvmti_headers/jvmti)
#
#    #    # 复制JNI头文件
#    #    file(COPY ${openjdk_SOURCE_DIR}/src/hotspot/share/prims
#    #            DESTINATION ${CMAKE_BINARY_DIR}/jvmti_headers/jni)
#    #
#    #    # 复制JVMTI头文件
#    #    file(COPY ${openjdk_SOURCE_DIR}/src/hotspot/share/prims
#    #            DESTINATION ${CMAKE_BINARY_DIR}/jvmti_headers/jvmti)
#    #
#    # 复制平台相关头文件（根据当前系统选择）
#    if (UNIX AND NOT APPLE)
#        set(PLATFORM "linux")
#    elseif (APPLE)
#        set(PLATFORM "darwin")
#    else ()
#        set(PLATFORM "windows")
#    endif ()
#    message(STATUS "${PLATFORM}")
#    #    message(STATUS "openjdk_POPULATED = ${openjdk_POPULATED}")
#    #    message(STATUS "openjdk_SOURCE_DIR = ${openjdk_SOURCE_DIR}")
#    #    message(STATUS "openjdk_BINARY_DIR = ${openjdk_BINARY_DIR}")
#    #
#    #    file(COPY ${openjdk_SOURCE_DIR}/src/hotspot/os/${PLATFORM}/prims
#    #            DESTINATION ${CMAKE_BINARY_DIR}/jvmti_headers/${PLATFORM})
#endif ()

## 添加JVMTI头文件路径
#include_directories(
#        ${CMAKE_BINARY_DIR}/jvmti_headers/jni/prims
#        ${CMAKE_BINARY_DIR}/jvmti_headers/jvmti/prims
#        ${CMAKE_BINARY_DIR}/jvmti_headers/${PLATFORM}/prims
#)
#
## 添加JVMTI头文件
##include_directories(
##        ${JAVA_HOME}/include
##        ${JAVA_HOME}/include/linux  # 根据平台选择：linux/win32/darwin
##)
#
## 添加源文件
#add_library(jvmti_example SHARED
#        src/agent.cpp
#)
#
## 链接必要的库（Linux/macOS需要）
#if(UNIX AND NOT APPLE)
#    target_link_libraries(jvmti_example
#            ${JAVA_HOME}/lib/server/libjvm.so
#    )
#elseif(APPLE)
#    target_link_libraries(jvmti_example
#            ${JAVA_HOME}/lib/server/libjvm.dylib
#    )
#endif()
#
## 链接必要的库（根据平台设置）
##if(UNIX AND NOT APPLE)
##    find_library(JVM_LIB jvm HINTS ${JAVA_HOME}/lib/server)
##    target_link_libraries(jvmti_example ${JVM_LIB})
##elseif(APPLE)
##    find_library(JVM_LIB jvm HINTS ${JAVA_HOME}/lib/server)
##    target_link_libraries(jvmti_example ${JVM_LIB})
##else()
##    # Windows平台链接方式
##    target_link_libraries(jvmti_example ${JAVA_HOME}/lib/jvm.lib)
##endif()
#
## 设置输出目录和库名称
#set_target_properties(jvmti_example PROPERTIES
#        LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib
#        PREFIX ""  # 移除lib前缀
#)
